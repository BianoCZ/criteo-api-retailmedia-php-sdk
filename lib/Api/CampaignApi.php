<?php
/**
 * CampaignApi
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\preview\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use criteo\api\retailmedia\preview\ApiException;
use criteo\api\retailmedia\preview\Configuration;
use criteo\api\retailmedia\preview\HeaderSelector;
use criteo\api\retailmedia\preview\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteApiV1ExternalBalanceCampaignsByBalanceId
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceId($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        list($response) = $this->deleteApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $json_api_data_request_of_delete_balance_campaign);
        return $response;
    }

    /**
     * Operation deleteApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        $request = $this->deleteApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_delete_balance_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApiV1ExternalBalanceCampaignsByBalanceIdAsync
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceIdAsync($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        return $this->deleteApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $json_api_data_request_of_delete_balance_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign';
        $request = $this->deleteApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_delete_balance_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApiV1ExternalBalanceCampaignsByBalanceId'
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling deleteApiV1ExternalBalanceCampaignsByBalanceId'
            );
        }

        $resourcePath = '/preview/retail-media/balances/{balanceId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balanceId' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_data_request_of_delete_balance_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_data_request_of_delete_balance_campaign));
            } else {
                $httpBody = $json_api_data_request_of_delete_balance_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteApiV1ExternalLineItemProductsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemId($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        list($response) = $this->deleteApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);
        return $response;
    }

    /**
     * Operation deleteApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        $request = $this->deleteApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApiV1ExternalLineItemProductsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemIdAsync($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        return $this->deleteApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct';
        $request = $this->deleteApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApiV1ExternalLineItemProductsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling deleteApiV1ExternalLineItemProductsByLineItemId'
            );
        }

        $resourcePath = '/preview/retail-media/line-items/{lineItemId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_data_request_with_id_of_string_and_promoted_product)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_data_request_with_id_of_string_and_promoted_product));
            } else {
                $httpBody = $json_api_data_request_with_id_of_string_and_promoted_product;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV0ExternalCatalogOutputByCatalogId
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getApiV0ExternalCatalogOutputByCatalogId($catalog_id)
    {
        $this->getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo($catalog_id);
    }

    /**
     * Operation getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo($catalog_id)
    {
        $request = $this->getApiV0ExternalCatalogOutputByCatalogIdRequest($catalog_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV0ExternalCatalogOutputByCatalogIdAsync
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV0ExternalCatalogOutputByCatalogIdAsync($catalog_id)
    {
        return $this->getApiV0ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo($catalog_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV0ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV0ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo($catalog_id)
    {
        $returnType = '';
        $request = $this->getApiV0ExternalCatalogOutputByCatalogIdRequest($catalog_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV0ExternalCatalogOutputByCatalogId'
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV0ExternalCatalogOutputByCatalogIdRequest($catalog_id)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getApiV0ExternalCatalogOutputByCatalogId'
            );
        }

        $resourcePath = '/preview/retail-media/catalogs/{catalogId}/output';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/x-json-stream', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/x-json-stream', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV0ExternalCatalogStatusByCatalogId
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus
     */
    public function getApiV0ExternalCatalogStatusByCatalogId($catalog_id)
    {
        list($response) = $this->getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo($catalog_id);
        return $response;
    }

    /**
     * Operation getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo($catalog_id)
    {
        $request = $this->getApiV0ExternalCatalogStatusByCatalogIdRequest($catalog_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV0ExternalCatalogStatusByCatalogIdAsync
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV0ExternalCatalogStatusByCatalogIdAsync($catalog_id)
    {
        return $this->getApiV0ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo($catalog_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV0ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV0ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo($catalog_id)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus';
        $request = $this->getApiV0ExternalCatalogStatusByCatalogIdRequest($catalog_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV0ExternalCatalogStatusByCatalogId'
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV0ExternalCatalogStatusByCatalogIdRequest($catalog_id)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getApiV0ExternalCatalogStatusByCatalogId'
            );
        }

        $resourcePath = '/preview/retail-media/catalogs/{catalogId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountBalancesByAccountId
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBalance
     */
    public function getApiV1ExternalAccountBalancesByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountBalancesByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountBalancesByAccountIdWithHttpInfo
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountBalancesByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBalance' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBalance', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBalance';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountBalancesByAccountIdAsync
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBalancesByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountBalancesByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountBalancesByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBalancesByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBalance';
        $request = $this->getApiV1ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountBalancesByAccountId'
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountBalancesByAccountId'
            );
        }

        $resourcePath = '/preview/retail-media/accounts/{accountId}/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand
     */
    public function getApiV1ExternalAccountBrandsByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBrandsByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand';
        $request = $this->getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountBrandsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountBrandsByAccountId'
            );
        }

        $resourcePath = '/preview/retail-media/accounts/{accountId}/brands';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfCampaign
     */
    public function getApiV1ExternalAccountCampaignsByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfCampaign';
        $request = $this->getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountCampaignsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountCampaignsByAccountId'
            );
        }

        $resourcePath = '/preview/retail-media/accounts/{accountId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer
     */
    public function getApiV1ExternalAccountRetailersByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountRetailersByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer';
        $request = $this->getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountRetailersByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountRetailersByAccountId'
            );
        }

        $resourcePath = '/preview/retail-media/accounts/{accountId}/retailers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccounts
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount
     */
    public function getApiV1ExternalAccounts($limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountsWithHttpInfo($limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountsWithHttpInfo
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountsWithHttpInfo($limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountsRequest($limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountsAsync
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountsAsync($limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountsAsyncWithHttpInfo($limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountsAsyncWithHttpInfo
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountsAsyncWithHttpInfo($limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount';
        $request = $this->getApiV1ExternalAccountsRequest($limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccounts'
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountsRequest($limit_to_id = null, $page_index = null, $page_size = null)
    {

        $resourcePath = '/preview/retail-media/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalBalanceCampaignsByBalanceId
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceId($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalBalanceCampaignsByBalanceIdAsync
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceIdAsync($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign';
        $request = $this->getApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalBalanceCampaignsByBalanceId'
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling getApiV1ExternalBalanceCampaignsByBalanceId'
            );
        }

        $resourcePath = '/preview/retail-media/balances/{balanceId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balanceId' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign
     */
    public function getApiV1ExternalCampaignByCampaignId($campaign_id)
    {
        list($response) = $this->getApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id);
        return $response;
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id)
    {
        $request = $this->getApiV1ExternalCampaignByCampaignIdRequest($campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCampaignByCampaignIdAsync($campaign_id)
    {
        return $this->getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->getApiV1ExternalCampaignByCampaignIdRequest($campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalCampaignByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalCampaignByCampaignIdRequest($campaign_id)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getApiV1ExternalCampaignByCampaignId'
            );
        }

        $resourcePath = '/preview/retail-media/campaigns/{campaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalCampaignLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfLineItem
     */
    public function getApiV1ExternalCampaignLineItemsByCampaignId($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfLineItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalCampaignLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfLineItem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfLineItem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfLineItem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfLineItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalCampaignLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCampaignLineItemsByCampaignIdAsync($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalCampaignLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalCampaignLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCampaignLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfLineItem';
        $request = $this->getApiV1ExternalCampaignLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalCampaignLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalCampaignLineItemsByCampaignIdRequest($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getApiV1ExternalCampaignLineItemsByCampaignId'
            );
        }

        $resourcePath = '/preview/retail-media/campaigns/{campaignId}/line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem
     */
    public function getApiV1ExternalLineItemByLineItemId($line_item_id)
    {
        list($response) = $this->getApiV1ExternalLineItemByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApiV1ExternalLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalLineItemByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApiV1ExternalLineItemByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalLineItemByLineItemIdAsync($line_item_id)
    {
        return $this->getApiV1ExternalLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem';
        $request = $this->getApiV1ExternalLineItemByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalLineItemByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV1ExternalLineItemByLineItemId'
            );
        }

        $resourcePath = '/preview/retail-media/line-items/{lineItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalLineItemProductsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct
     */
    public function getApiV1ExternalLineItemProductsByLineItemId($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalLineItemProductsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalLineItemProductsByLineItemIdAsync($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct';
        $request = $this->getApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalLineItemProductsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV1ExternalLineItemProductsByLineItemId'
            );
        }

        $resourcePath = '/preview/retail-media/line-items/{lineItemId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalRetailerByRetailerIdSellerBySeller
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\SellerPreviewResponse
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySeller($retailer_id, $seller)
    {
        list($response) = $this->getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo($retailer_id, $seller);
        return $response;
    }

    /**
     * Operation getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\SellerPreviewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo($retailer_id, $seller)
    {
        $request = $this->getApiV1ExternalRetailerByRetailerIdSellerBySellerRequest($retailer_id, $seller);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\SellerPreviewResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\SellerPreviewResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\SellerPreviewResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\SellerPreviewResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalRetailerByRetailerIdSellerBySellerAsync
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySellerAsync($retailer_id, $seller)
    {
        return $this->getApiV1ExternalRetailerByRetailerIdSellerBySellerAsyncWithHttpInfo($retailer_id, $seller)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalRetailerByRetailerIdSellerBySellerAsyncWithHttpInfo
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySellerAsyncWithHttpInfo($retailer_id, $seller)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\SellerPreviewResponse';
        $request = $this->getApiV1ExternalRetailerByRetailerIdSellerBySellerRequest($retailer_id, $seller);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalRetailerByRetailerIdSellerBySeller'
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySellerRequest($retailer_id, $seller)
    {
        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller'
            );
        }
        // verify the required parameter 'seller' is set
        if ($seller === null || (is_array($seller) && count($seller) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller'
            );
        }

        $resourcePath = '/preview/retail-media/retailers/{retailerId}/sellers/{seller}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailerId' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }
        // path params
        if ($seller !== null) {
            $resourcePath = str_replace(
                '{' . 'seller' . '}',
                ObjectSerializer::toPathValue($seller),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV0ExternalAccountCatalogsByAccountId
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview json_api_request_of_catalog_request_preview (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus
     */
    public function postApiV0ExternalAccountCatalogsByAccountId($account_id, $json_api_request_of_catalog_request_preview = null)
    {
        list($response) = $this->postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo($account_id, $json_api_request_of_catalog_request_preview);
        return $response;
    }

    /**
     * Operation postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo($account_id, $json_api_request_of_catalog_request_preview = null)
    {
        $request = $this->postApiV0ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request_preview);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV0ExternalAccountCatalogsByAccountIdAsync
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV0ExternalAccountCatalogsByAccountIdAsync($account_id, $json_api_request_of_catalog_request_preview = null)
    {
        return $this->postApiV0ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo($account_id, $json_api_request_of_catalog_request_preview)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV0ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV0ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo($account_id, $json_api_request_of_catalog_request_preview = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus';
        $request = $this->postApiV0ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request_preview);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV0ExternalAccountCatalogsByAccountId'
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV0ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request_preview = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApiV0ExternalAccountCatalogsByAccountId'
            );
        }

        $resourcePath = '/preview/retail-media/accounts/{accountId}/catalogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_request_of_catalog_request_preview)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_request_of_catalog_request_preview));
            } else {
                $httpBody = $json_api_request_of_catalog_request_preview;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign
     */
    public function postApiV1ExternalAccountCampaignsByAccountId($account_id, $external_post_campaign = null)
    {
        list($response) = $this->postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $external_post_campaign);
        return $response;
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $external_post_campaign = null)
    {
        $request = $this->postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdAsync($account_id, $external_post_campaign = null)
    {
        return $this->postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $external_post_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $external_post_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalAccountCampaignsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApiV1ExternalAccountCampaignsByAccountId'
            );
        }

        $resourcePath = '/preview/retail-media/accounts/{accountId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($external_post_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($external_post_campaign));
            } else {
                $httpBody = $external_post_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalCampaignLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostLineItem $external_post_line_item The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem
     */
    public function postApiV1ExternalCampaignLineItemsByCampaignId($campaign_id, $external_post_line_item = null)
    {
        list($response) = $this->postApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo($campaign_id, $external_post_line_item);
        return $response;
    }

    /**
     * Operation postApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostLineItem $external_post_line_item The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalCampaignLineItemsByCampaignIdWithHttpInfo($campaign_id, $external_post_line_item = null)
    {
        $request = $this->postApiV1ExternalCampaignLineItemsByCampaignIdRequest($campaign_id, $external_post_line_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalCampaignLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostLineItem $external_post_line_item The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCampaignLineItemsByCampaignIdAsync($campaign_id, $external_post_line_item = null)
    {
        return $this->postApiV1ExternalCampaignLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $external_post_line_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalCampaignLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostLineItem $external_post_line_item The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCampaignLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $external_post_line_item = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem';
        $request = $this->postApiV1ExternalCampaignLineItemsByCampaignIdRequest($campaign_id, $external_post_line_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalCampaignLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPostLineItem $external_post_line_item The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalCampaignLineItemsByCampaignIdRequest($campaign_id, $external_post_line_item = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postApiV1ExternalCampaignLineItemsByCampaignId'
            );
        }

        $resourcePath = '/preview/retail-media/campaigns/{campaignId}/line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($external_post_line_item)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($external_post_line_item));
            } else {
                $httpBody = $external_post_line_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuRetrieval
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse
     */
    public function postApiV1ExternalCatalogsSkuRetrieval($page_index = 0, $page_size = 100, $request_body = null)
    {
        list($response) = $this->postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo($page_index, $page_size, $request_body);
        return $response;
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo($page_index = 0, $page_size = 100, $request_body = null)
    {
        $request = $this->postApiV1ExternalCatalogsSkuRetrievalRequest($page_index, $page_size, $request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuRetrievalAsync
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuRetrievalAsync($page_index = 0, $page_size = 100, $request_body = null)
    {
        return $this->postApiV1ExternalCatalogsSkuRetrievalAsyncWithHttpInfo($page_index, $page_size, $request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuRetrievalAsyncWithHttpInfo
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuRetrievalAsyncWithHttpInfo($page_index = 0, $page_size = 100, $request_body = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse';
        $request = $this->postApiV1ExternalCatalogsSkuRetrievalRequest($page_index, $page_size, $request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalCatalogsSkuRetrieval'
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalCatalogsSkuRetrievalRequest($page_index = 0, $page_size = 100, $request_body = null)
    {
        if ($page_index !== null && $page_index > 500) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.postApiV1ExternalCatalogsSkuRetrieval, must be smaller than or equal to 500.');
        }
        if ($page_index !== null && $page_index < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.postApiV1ExternalCatalogsSkuRetrieval, must be bigger than or equal to 0.');
        }

        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.postApiV1ExternalCatalogsSkuRetrieval, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.postApiV1ExternalCatalogsSkuRetrieval, must be bigger than or equal to 1.');
        }



        $resourcePath = '/preview/retail-media/catalogs/sku-retrieval';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearch
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request sku_search_request_preview_request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse
     */
    public function postApiV1ExternalCatalogsSkuSearch($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null)
    {
        list($response) = $this->postApiV1ExternalCatalogsSkuSearchWithHttpInfo($page_index, $page_size, $sku_search_request_preview_request);
        return $response;
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchWithHttpInfo
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalCatalogsSkuSearchWithHttpInfo($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null)
    {
        $request = $this->postApiV1ExternalCatalogsSkuSearchRequest($page_index, $page_size, $sku_search_request_preview_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchAsync
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuSearchAsync($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null)
    {
        return $this->postApiV1ExternalCatalogsSkuSearchAsyncWithHttpInfo($page_index, $page_size, $sku_search_request_preview_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchAsyncWithHttpInfo
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuSearchAsyncWithHttpInfo($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse';
        $request = $this->postApiV1ExternalCatalogsSkuSearchRequest($page_index, $page_size, $sku_search_request_preview_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalCatalogsSkuSearch'
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalCatalogsSkuSearchRequest($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null)
    {
        if ($page_index !== null && $page_index > 500) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearch, must be smaller than or equal to 500.');
        }
        if ($page_index !== null && $page_index < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearch, must be bigger than or equal to 0.');
        }

        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearch, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearch, must be bigger than or equal to 1.');
        }


        $resourcePath = '/preview/retail-media/catalogs/sku-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($sku_search_request_preview_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($sku_search_request_preview_request));
            } else {
                $httpBody = $sku_search_request_preview_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV1ExternalBalanceCampaignsByBalanceId
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceId($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        list($response) = $this->putApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $json_api_data_request_of_put_balance_campaign);
        return $response;
    }

    /**
     * Operation putApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        $request = $this->putApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_put_balance_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV1ExternalBalanceCampaignsByBalanceIdAsync
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceIdAsync($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        return $this->putApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $json_api_data_request_of_put_balance_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\PageOfBalanceCampaign';
        $request = $this->putApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_put_balance_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV1ExternalBalanceCampaignsByBalanceId'
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling putApiV1ExternalBalanceCampaignsByBalanceId'
            );
        }

        $resourcePath = '/preview/retail-media/balances/{balanceId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balanceId' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_data_request_of_put_balance_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_data_request_of_put_balance_campaign));
            } else {
                $httpBody = $json_api_data_request_of_put_balance_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign
     */
    public function putApiV1ExternalCampaignByCampaignId($campaign_id, $external_put_campaign = null)
    {
        list($response) = $this->putApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id, $external_put_campaign);
        return $response;
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id, $external_put_campaign = null)
    {
        $request = $this->putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalCampaignByCampaignIdAsync($campaign_id, $external_put_campaign = null)
    {
        return $this->putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id, $external_put_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id, $external_put_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV1ExternalCampaignByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling putApiV1ExternalCampaignByCampaignId'
            );
        }

        $resourcePath = '/preview/retail-media/campaigns/{campaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($external_put_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($external_put_campaign));
            } else {
                $httpBody = $external_put_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV1ExternalLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutLineItem $external_put_line_item The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem
     */
    public function putApiV1ExternalLineItemByLineItemId($line_item_id, $external_put_line_item = null)
    {
        list($response) = $this->putApiV1ExternalLineItemByLineItemIdWithHttpInfo($line_item_id, $external_put_line_item);
        return $response;
    }

    /**
     * Operation putApiV1ExternalLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutLineItem $external_put_line_item The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV1ExternalLineItemByLineItemIdWithHttpInfo($line_item_id, $external_put_line_item = null)
    {
        $request = $this->putApiV1ExternalLineItemByLineItemIdRequest($line_item_id, $external_put_line_item);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV1ExternalLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutLineItem $external_put_line_item The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalLineItemByLineItemIdAsync($line_item_id, $external_put_line_item = null)
    {
        return $this->putApiV1ExternalLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $external_put_line_item)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV1ExternalLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutLineItem $external_put_line_item The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $external_put_line_item = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItem';
        $request = $this->putApiV1ExternalLineItemByLineItemIdRequest($line_item_id, $external_put_line_item);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV1ExternalLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\preview\Model\ExternalPutLineItem $external_put_line_item The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV1ExternalLineItemByLineItemIdRequest($line_item_id, $external_put_line_item = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApiV1ExternalLineItemByLineItemId'
            );
        }

        $resourcePath = '/preview/retail-media/line-items/{lineItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($external_put_line_item)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($external_put_line_item));
            } else {
                $httpBody = $external_put_line_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV1ExternalLineItemProductsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct
     */
    public function putApiV1ExternalLineItemProductsByLineItemId($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        list($response) = $this->putApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);
        return $response;
    }

    /**
     * Operation putApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        $request = $this->putApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV1ExternalLineItemProductsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalLineItemProductsByLineItemIdAsync($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        return $this->putApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfStringAndPromotedProduct';
        $request = $this->putApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV1ExternalLineItemProductsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApiV1ExternalLineItemProductsByLineItemId'
            );
        }

        $resourcePath = '/preview/retail-media/line-items/{lineItemId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_data_request_with_id_of_string_and_promoted_product)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_data_request_with_id_of_string_and_promoted_product));
            } else {
                $httpBody = $json_api_data_request_with_id_of_string_and_promoted_product;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
